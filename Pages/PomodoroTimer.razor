@page "/pomodorotimer"
@using System.Dynamic
@implements IDisposable

<PageTitle>Pomodoro Timer (@SecondsLeftString)</PageTitle>

<div class="timer">
    @SecondsLeftString
</div>
<button class="btn btn-primary" @onclick="StartTimer">
    @if (IsPaused)
    {
        <label>Resume</label>
    }
    else
    {
        <label>Start</label>
    }
</button>
<button class="btn btn-secondary" @onclick="PauseTimer">Pause</button>
<button class="btn btn-secondary" @onclick="StopTimer">Stop</button>

@code
{
    private const int PomodoroSeconds = 25 * 60;
    private int SecondsLeft { get; set; } = PomodoroSeconds;
    private string SecondsLeftString => TimeSpan.FromSeconds(SecondsLeft).ToString(@"mm\:ss");
    private PeriodicTimer? Timer { get; set; } = null;
    private bool IsRunning => Timer != null;
    private bool IsPaused { get; set; } = false;

    public async Task StartTimer()
    {
        if (IsRunning)
        {
            return;
        }

        IsPaused = false;
        Timer = new PeriodicTimer(TimeSpan.FromSeconds(1));
        
        while (SecondsLeft > 0)
        {
            var ranTimer = await Timer.WaitForNextTickAsync();
            if (ranTimer == false)
            {
                Timer = null;
                break;
            }

            SecondsLeft--;
            await InvokeAsync(StateHasChanged);
        }
    }

    public void StopTimer()
    {
        IsPaused = false;
        Timer?.Dispose();
        SecondsLeft = PomodoroSeconds;
    }

    private void PauseTimer()
    {
        IsPaused = true;
        Timer?.Dispose();
    }

    public void Dispose()
    {
        Timer?.Dispose();
    }
}
